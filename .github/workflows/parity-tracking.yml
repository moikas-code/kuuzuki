name: Fork Parity Tracking

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      force_full_analysis:
        description: 'Force full parity analysis'
        required: false
        default: 'false'
        type: boolean
      notify_discord:
        description: 'Send Discord notification'
        required: false
        default: 'true'
        type: boolean

env:
  UPSTREAM_REMOTE_NAME: upstream
  UPSTREAM_BRANCH: dev
  LOCAL_BRANCH: master

jobs:
  parity-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Setup upstream remote
      run: |
        git remote add upstream https://github.com/sst/opencode.git || true
        git fetch upstream
        git fetch origin

    - name: Install fork-parity MCP server
      run: |
        # Install fork-parity-mcp if not already available
        if ! command -v fork-parity-mcp &> /dev/null; then
          echo "Installing fork-parity-mcp..."
          npm install -g fork-parity-mcp || echo "fork-parity-mcp installation failed, continuing..."
        fi

    - name: Run parity analysis
      id: parity_analysis
      run: |
        # Create reports directory
        mkdir -p .fork-parity-reports
        
        # Generate timestamp
        TIMESTAMP=$(date +"%Y-%m-%d_%H%M%S")
        
        # Run comprehensive parity analysis
        echo "Running parity analysis..."
        
        # Get detailed status
        if command -v fork-parity-mcp &> /dev/null; then
          fork-parity-mcp status --format json > ".fork-parity-reports/status_${TIMESTAMP}.json" || echo "Status command failed"
          fork-parity-mcp dashboard --format json > ".fork-parity-reports/dashboard_${TIMESTAMP}.json" || echo "Dashboard command failed"
          fork-parity-mcp actionable --limit 50 > ".fork-parity-reports/actionable_${TIMESTAMP}.json" || echo "Actionable command failed"
        else
          echo "fork-parity-mcp not available, using git commands"
          
          # Basic git analysis
          COMMITS_BEHIND=$(git rev-list --count HEAD..upstream/dev)
          COMMITS_AHEAD=$(git rev-list --count upstream/dev..HEAD)
          
          # Create basic status report
          cat > ".fork-parity-reports/status_${TIMESTAMP}.json" << EOF
        {
          "generated_at": "$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")",
          "repository": {
            "path": "$(pwd)",
            "upstream_url": "https://github.com/sst/opencode.git",
            "upstream_branch": "dev"
          },
          "summary": {
            "commits_behind": ${COMMITS_BEHIND},
            "commits_ahead": ${COMMITS_AHEAD},
            "analysis_method": "basic_git"
          }
        }
        EOF
        fi
        
        # Set outputs for later steps
        echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
        echo "reports_generated=true" >> $GITHUB_OUTPUT

    - name: Update knowledge base
      run: |
        TIMESTAMP="${{ steps.parity_analysis.outputs.timestamp }}"
        
        # Create or update parity status in knowledge base
        if [ -f ".fork-parity-reports/status_${TIMESTAMP}.json" ]; then
          # Extract key metrics for KB update
          COMMITS_BEHIND=$(cat ".fork-parity-reports/status_${TIMESTAMP}.json" | jq -r '.summary.commits_behind // .summary.total_commits // "unknown"')
          COMMITS_AHEAD=$(cat ".fork-parity-reports/status_${TIMESTAMP}.json" | jq -r '.summary.commits_ahead // "unknown"')
          
          # Update KB with current status
          cat > "kb/active/automated-parity-status.md" << EOF
        # Automated Parity Status - $(date +"%Y-%m-%d")
        
        **Last Updated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Analysis Method**: Automated GitHub Actions
        
        ## Current Status
        - **Commits Behind Upstream**: ${COMMITS_BEHIND}
        - **Commits Ahead of Upstream**: ${COMMITS_AHEAD}
        - **Last Analysis**: ${TIMESTAMP}
        
        ## Reports Generated
        - Status Report: \`.fork-parity-reports/status_${TIMESTAMP}.json\`
        - Dashboard: \`.fork-parity-reports/dashboard_${TIMESTAMP}.json\`
        - Actionable Items: \`.fork-parity-reports/actionable_${TIMESTAMP}.json\`
        
        ## Next Steps
        1. Review actionable items for critical changes
        2. Analyze new upstream commits for integration opportunities
        3. Update integration status for completed work
        
        *This report is automatically generated by GitHub Actions.*
        EOF
        fi

    - name: Commit parity reports
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add generated reports
        git add .fork-parity-reports/
        git add kb/active/automated-parity-status.md
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "chore: update automated parity tracking reports
          
          - Generated parity analysis for $(date +"%Y-%m-%d")
          - Updated knowledge base with current status
          - Added detailed reports to .fork-parity-reports/
          
          ðŸ¤– Generated with GitHub Actions"
          
          git push
        fi

    - name: Generate Discord notification
      if: ${{ inputs.notify_discord != 'false' && secrets.DISCORD_WEBHOOK_URL }}
      run: |
        TIMESTAMP="${{ steps.parity_analysis.outputs.timestamp }}"
        
        # Extract key metrics for notification
        if [ -f ".fork-parity-reports/status_${TIMESTAMP}.json" ]; then
          COMMITS_BEHIND=$(cat ".fork-parity-reports/status_${TIMESTAMP}.json" | jq -r '.summary.commits_behind // .summary.total_commits // "unknown"')
          CRITICAL_COUNT=$(cat ".fork-parity-reports/status_${TIMESTAMP}.json" | jq -r '.summary.critical_count // 0')
          
          # Create Discord webhook payload
          cat > discord_payload.json << EOF
        {
          "embeds": [
            {
              "title": "ðŸ”„ Kuuzuki Fork Parity Update",
              "description": "Daily parity analysis completed",
              "color": 3447003,
              "fields": [
                {
                  "name": "ðŸ“Š Status",
                  "value": "**${COMMITS_BEHIND}** commits behind upstream",
                  "inline": true
                },
                {
                  "name": "ðŸš¨ Critical Items",
                  "value": "${CRITICAL_COUNT}",
                  "inline": true
                },
                {
                  "name": "ðŸ“… Analysis Date",
                  "value": "$(date +"%Y-%m-%d %H:%M UTC")",
                  "inline": true
                }
              ],
              "footer": {
                "text": "Automated by GitHub Actions"
              }
            }
          ]
        }
        EOF
          
          # Send to Discord
          curl -H "Content-Type: application/json" \
               -d @discord_payload.json \
               "${{ secrets.DISCORD_WEBHOOK_URL }}"
        fi

    - name: Create issue for critical items
      if: ${{ always() }}
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const timestamp = '${{ steps.parity_analysis.outputs.timestamp }}';
          const statusFile = `.fork-parity-reports/status_${timestamp}.json`;
          
          if (fs.existsSync(statusFile)) {
            const status = JSON.parse(fs.readFileSync(statusFile, 'utf8'));
            const criticalCount = status.summary?.critical_count || 0;
            
            if (criticalCount > 0) {
              // Check if there's already an open parity issue
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['parity-tracking', 'critical'],
                state: 'open'
              });
              
              if (issues.data.length === 0) {
                // Create new issue for critical items
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `ðŸš¨ Critical Parity Items Detected - ${new Date().toISOString().split('T')[0]}`,
                  body: `## Critical Parity Items Detected
          
          **Analysis Date**: ${new Date().toISOString()}
          **Critical Items**: ${criticalCount}
          
          ### Summary
          The automated parity analysis has detected ${criticalCount} critical items that require immediate attention.
          
          ### Next Steps
          1. Review the detailed analysis in \`.fork-parity-reports/status_${timestamp}.json\`
          2. Prioritize critical security and breaking changes
          3. Create integration plan for high-priority items
          4. Update parity status after integration
          
          ### Reports
          - [Status Report](.fork-parity-reports/status_${timestamp}.json)
          - [Dashboard](.fork-parity-reports/dashboard_${timestamp}.json)
          - [Actionable Items](.fork-parity-reports/actionable_${timestamp}.json)
          
          *This issue was automatically created by the parity tracking system.*`,
                  labels: ['parity-tracking', 'critical', 'automated']
                });
              }
            }
          }

  cleanup-old-reports:
    runs-on: ubuntu-latest
    needs: parity-analysis
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Cleanup old reports
      run: |
        # Keep only the last 30 days of reports
        find .fork-parity-reports -name "*.json" -type f -mtime +30 -delete || true
        
        # Commit cleanup if there are changes
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if [ -n "$(git status --porcelain .fork-parity-reports)" ]; then
          git add .fork-parity-reports
          git commit -m "chore: cleanup old parity reports (>30 days)"
          git push
        fi