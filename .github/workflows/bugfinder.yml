name: Bugfinder Analysis

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]
  schedule:
    # Run daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      severity:
        description: "Minimum severity level"
        required: false
        default: "medium"
        type: choice
        options:
          - low
          - medium
          - high
          - critical
      path:
        description: "Path to analyze"
        required: false
        default: "."
        type: string

jobs:
  bugfinder:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build kuuzuki
        run: ./run.sh build server

      - name: Set up environment variables
        run: |
          if [ -z "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            echo "‚ö†Ô∏è  ANTHROPIC_API_KEY secret not set. Bugfinder will run in static analysis mode."
            echo "üìã Static analysis includes: TypeScript check, build verification, and security audit."
            echo "HAS_API_KEY=false" >> $GITHUB_ENV
          else
            echo "ü§ñ ANTHROPIC_API_KEY found. Running full AI-powered bugfinder analysis."
            echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> $GITHUB_ENV
            echo "HAS_API_KEY=true" >> $GITHUB_ENV
          fi

      - name: Install moidvk for enhanced analysis
        run: |
          # Try to install moidvk for enhanced analysis
          bun install -g @moikas/moidvk || echo "Failed to install moidvk, will use basic analysis"

      - name: Run bugfinder analysis
        id: bugfinder
        timeout-minutes: 10
        run: |
          SEVERITY="${{ github.event.inputs.severity || 'medium' }}"
          PATH_TO_ANALYZE="${{ github.event.inputs.path || '.' }}"

          echo "Running bugfinder analysis..."
          echo "Path: $PATH_TO_ANALYZE"
          echo "Severity: $SEVERITY"

          # Run bugfinder analysis with timeout (it will automatically detect API key availability)
          timeout 600 ./run.sh bugfind "$PATH_TO_ANALYZE" "$SEVERITY" > bugfinder-report.txt 2>&1 || {
            echo "Bugfinder timed out or failed, generating basic report..."
            echo "## Bugfinder Analysis Report" > bugfinder-report.txt
            echo "Generated on: $(date)" >> bugfinder-report.txt
            echo "" >> bugfinder-report.txt
            echo "### Status" >> bugfinder-report.txt
            echo "‚ùå Full analysis failed or timed out" >> bugfinder-report.txt
            echo "" >> bugfinder-report.txt
            echo "### Basic Checks" >> bugfinder-report.txt
            
            # Run basic TypeScript check
            echo "#### TypeScript Check" >> bugfinder-report.txt
            cd packages/kuuzuki
            if bun run typecheck > typecheck.log 2>&1; then
              echo "‚úÖ TypeScript check passed" >> ../../bugfinder-report.txt
            else
              echo "‚ùå TypeScript check failed" >> ../../bugfinder-report.txt
              echo "" >> ../../bugfinder-report.txt
              echo "**TypeScript Errors:**" >> ../../bugfinder-report.txt
              echo '```' >> ../../bugfinder-report.txt
              cat typecheck.log >> ../../bugfinder-report.txt
              echo '```' >> ../../bugfinder-report.txt
            fi
            cd ../..
            
            # Run basic build check
            echo "" >> bugfinder-report.txt
            echo "#### Build Check" >> bugfinder-report.txt
            if ./run.sh build server >/dev/null 2>&1; then
              echo "‚úÖ Build check passed" >> bugfinder-report.txt
            else
              echo "‚ùå Build check failed" >> bugfinder-report.txt
            fi
            
            echo "" >> bugfinder-report.txt
            echo "### Recommendation" >> bugfinder-report.txt
            echo "Run bugfinder locally with proper MCP server setup for comprehensive analysis." >> bugfinder-report.txt
          }

          # Check if report was generated and determine analysis type
          if [ -f bugfinder-report.txt ] && [ -s bugfinder-report.txt ]; then
            echo "report_generated=true" >> $GITHUB_OUTPUT
            
            # Check if it was static analysis or AI analysis
            if grep -q "Static Code Analysis Report" bugfinder-report.txt; then
              echo "analysis_type=static" >> $GITHUB_OUTPUT
              echo "Static analysis completed successfully"
            else
              echo "analysis_type=ai" >> $GITHUB_OUTPUT
              echo "AI-powered analysis completed successfully"
            fi
          else
            echo "report_generated=false" >> $GITHUB_OUTPUT
            echo "analysis_type=failed" >> $GITHUB_OUTPUT
            echo "Analysis failed - no report generated"
          fi
      - name: Upload bugfinder report
        if: steps.bugfinder.outputs.report_generated == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: bugfinder-report-${{ github.sha }}
          path: bugfinder-report.txt
          retention-days: 30

      - name: Comment on PR
        if: github.event_name == 'pull_request' && steps.bugfinder.outputs.report_generated == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const report = fs.readFileSync('bugfinder-report.txt', 'utf8');
              const truncatedReport = report.length > 60000 ? 
                report.substring(0, 60000) + '\n\n... (report truncated, see full report in artifacts)' : 
                report;
              
              const severity = github.event.inputs.severity || 'medium';
              const path = github.event.inputs.path || '.';
              const commit = context.sha.substring(0, 7);
              const owner = context.repo.owner;
              const repo = context.repo.repo;
              const runId = context.runId;
              const analysisType = '${{ steps.bugfinder.outputs.analysis_type }}';
              
              let analysisIcon = 'üîç';
              let analysisTitle = 'Bugfinder Analysis Report';
              
              if (analysisType === 'static') {
                analysisIcon = '‚ö°';
                analysisTitle = 'Static Code Analysis Report';
              } else if (analysisType === 'ai') {
                analysisIcon = 'ü§ñ';
                analysisTitle = 'AI-Powered Bugfinder Report';
              }
              
              const body = `## ${analysisIcon} ${analysisTitle}\n\n` +
                `**Analysis Type:** ${analysisType === 'static' ? 'Static Analysis (No API Key)' : 'AI-Powered Analysis'}\n` +
                `**Severity Level:** ${severity}\n` +
                `**Path Analyzed:** ${path}\n` +
                `**Commit:** ${commit}\n\n` +
                '<details>\n' +
                '<summary>Click to view full report</summary>\n\n' +
                '```\n' +
                truncatedReport + '\n' +
                '```\n\n' +
                '</details>\n\n' +
                `üìé Full report available in [workflow artifacts](https://github.com/${owner}/${repo}/actions/runs/${runId})`;

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } catch (error) {
              console.log('Error reading report file:', error);
              
              // Create a fallback comment if report reading fails
              const fallbackBody = `## ‚ö†Ô∏è Bugfinder Analysis\n\n` +
                `Analysis completed but report could not be read.\n` +
                `Check the [workflow logs](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: fallbackBody
              });
            }
      - name: Create bugfix PR
        if: github.event_name == 'schedule' && steps.bugfinder.outputs.report_generated == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const report = fs.readFileSync('bugfinder-report.txt', 'utf8');
              
              // Check if there are actionable issues
              const hasIssues = report.includes('ERROR') || report.includes('CRITICAL') || 
                               report.includes('WARNING') || report.includes('vulnerability');
              
              if (hasIssues) {
                const date = new Date().toISOString().split('T')[0];
                const branchName = `bugfinder/automated-fixes-${date}`;
                
                // Create a new branch
                const { data: ref } = await github.rest.git.getRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: 'heads/master'
                });
                
                await github.rest.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `refs/heads/${branchName}`,
                  sha: ref.object.sha
                });
                
                // Create PR
                const prBody = `## üîç Automated Bugfinder Report\n\n` +
                  `This PR was automatically created by the bugfinder workflow.\n\n` +
                  `### Issues Found:\n\n` +
                  '```\n' +
                  report.substring(0, 30000) + '\n' +
                  '```\n\n' +
                  `### Next Steps:\n` +
                  `- Review the issues identified above\n` +
                  `- Apply fixes as needed\n` +
                  `- Run tests to ensure fixes don't break functionality\n` +
                  `- Merge when ready\n\n` +
                  `Generated on: ${new Date().toISOString()}`;
                
                await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `üîß Automated bugfinder fixes - ${date}`,
                  head: branchName,
                  base: 'master',
                  body: prBody
                });
                
                console.log(`Created PR for branch: ${branchName}`);
              } else {
                console.log('No actionable issues found, skipping PR creation');
              }
            } catch (error) {
              console.log('Error creating bugfix PR:', error);
            }

      - name: Fail on critical issues
        if: github.event.inputs.severity == 'critical' || (github.event_name == 'push' && github.ref == 'refs/heads/master')
        run: |
          if [ -f bugfinder-report.txt ] && grep -q "CRITICAL\|ERROR" bugfinder-report.txt 2>/dev/null; then
            echo "Critical issues found in bugfinder report"
            exit 1
          fi

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run security vulnerability scan
        run: |
          echo "Running security vulnerability scan..."
          bun audit --audit-level moderate || true

      - name: Check for high-risk dependencies
        run: |
          echo "Checking for high-risk dependencies..."
          # Add custom security checks here
          echo "Security scan completed"
