name: Publish Kuuzuki to NPM (Development)
on:
  push:
    tags:
      - 'dev-v*'

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout code
      - uses: actions/checkout@v4
      
      # 2. Setup Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      
      # 3. Setup Bun
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      # 4. Setup Go for TUI
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      
      # 5. Install dependencies
      - name: Install dependencies
        shell: bash
        env:
          # Force C++17 to avoid C++20 compatibility issues
          CXXFLAGS: "-std=c++17"
          CPPFLAGS: "-std=c++17"
          # Skip optional dependencies that might cause issues
          SHARP_IGNORE_GLOBAL_LIBVIPS: "1"
          # Use system Python
          PYTHON: "python3"
        run: |
          set -x
          which bun
          bun install
      
      # 6. Extract version from tag
      - name: Extract version
        id: extract_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          VERSION=${VERSION#kuuzuki-v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"
      
       # 7. Run tests before publishing
       - name: Run tests
         run: |
           echo "Running test suite..."
           bun test --timeout 30000 || {
             echo "❌ Tests failed! Stopping publish process."
             exit 1
           }
           echo "✅ All tests passed!"

       # 8. Fix catalog dependencies
       - name: Fix catalog dependencies
         run: |
           cd packages/kuuzuki
           echo "Running fix-catalog-deps.js..."
           node scripts/fix-catalog-deps.js
           echo "Checking package.json after fix..."
           grep -c "catalog:" package.json || echo "No catalog: references found"
           
           # Also remove catalog field from root package.json for npm compatibility
           cd ../..
           if grep -q '"catalog":' package.json; then
             echo "Removing catalog field from root package.json..."
             node -e "
               const fs = require('fs');
               const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
               delete pkg.catalog;
               fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
               console.log('Removed catalog field from root package.json');
             "
           fi

       # 9. Update version in package.json
       - name: Update package version
        run: |
          cd packages/kuuzuki
          # Manually update version to avoid npm catalog issues
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.version = '${{ steps.extract_version.outputs.version }}';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\\n');
            console.log('Updated version to:', pkg.version);
          "
      
       # 10. Prepare source for npm (fix Bun macros)
       - name: Prepare source files
         run: |
           cd packages/kuuzuki
           bun run scripts/prepare-npm.ts
       
       # 11. Build cross-platform TUI binaries and packages      - name: Build all platform packages
        run: |
          cd packages/kuuzuki
          
          # Clean dist directory
          rm -rf dist
          mkdir -p dist/npm
          
          # Define platforms
          platforms=(
            "linux:amd64:linux-x64"
            "linux:arm64:linux-arm64"
            "darwin:amd64:darwin-x64"
            "darwin:arm64:darwin-arm64"
            "windows:amd64:windows-x64"
          )
          
          echo "Building TUI binaries for all platforms..."
          
          for platform in "${platforms[@]}"; do
            IFS=':' read -r goos goarch pkgname <<< "$platform"
            
            echo "Building $pkgname (GOOS=$goos GOARCH=$goarch)..."
            
            # Create package directory
            mkdir -p "dist/npm/kuuzuki-$pkgname/bin"
            
            # Determine binary name
            binary_name="kuuzuki-tui"
            if [ "$goos" = "windows" ]; then
              binary_name="kuuzuki-tui.exe"
            fi
            
            # Build TUI binary
            cd ../../packages/tui
            GOOS="$goos" GOARCH="$goarch" CGO_ENABLED=0 \
              go build -ldflags="-s -w -X main.Version=${{ steps.extract_version.outputs.version }}" \
              -o "../kuuzuki/dist/npm/kuuzuki-$pkgname/bin/$binary_name" \
              ./cmd/kuuzuki
            
            cd ../../packages/kuuzuki
            
            # Copy README to platform package
            cp README.md "dist/npm/kuuzuki-$pkgname/"
            
            # Create package.json for platform package
            cat > "dist/npm/kuuzuki-$pkgname/package.json" << EOF
          {
            "name": "kuuzuki-$pkgname",
            "version": "${{ steps.extract_version.outputs.version }}",
            "description": "Kuuzuki binaries for $pkgname",
            "license": "MIT",
            "repository": {
              "type": "git",
              "url": "git+https://github.com/moikas-code/kuuzuki.git"
            },
            "files": ["bin"],
            "os": ["${goos/darwin/darwin}"],
            "cpu": ["${goarch/amd64/x64}"]
          }
          EOF
            
            echo "✓ Built $pkgname"
          done
          
          echo "All platform binaries built successfully!"
      
       # 12. Create main package
       - name: Create main kuuzuki package        run: |
          cd packages/kuuzuki
          
          # Create main package structure
          mkdir -p dist/npm/kuuzuki/{bin,src}
          
          # Copy source files
          cp -r src/* dist/npm/kuuzuki/src/
          
          # Copy README
          cp README.md dist/npm/kuuzuki/
          
          # Create launcher script
          cat > dist/npm/kuuzuki/bin/kuuzuki << 'EOF'
          #!/usr/bin/env node
          const { spawn, spawnSync } = require('child_process');
          const { join, dirname, resolve } = require('path');
          const { existsSync, realpathSync } = require('fs');
          const os = require('os');
          
          // Resolve the real path of this script
          const scriptPath = realpathSync(__filename);
          const scriptDir = dirname(scriptPath);
          
          // Check if bun is available
          const hasBun = (() => {
            try {
              const result = spawnSync(process.platform === 'win32' ? 'bun.exe' : 'bun', ['--version'], { 
                stdio: 'pipe',
                shell: false
              });
              return result.status === 0;
            } catch {
              return false;
            }
          })();
          
          if (!hasBun) {
            console.error('Bun runtime is required to run kuuzuki');
            console.error('Install it from: https://bun.sh');
            process.exit(1);
          }
          
          // ALWAYS run through TypeScript entry point
          const indexPath = join(scriptDir, '..', 'src', 'index.ts');
          
          if (!existsSync(indexPath)) {
            console.error('Could not find kuuzuki source files at:', indexPath);
            console.error('This appears to be a broken installation.');
            process.exit(1);
          }
          
          const bunCmd = process.platform === 'win32' ? 'bun.exe' : 'bun';
          const child = spawn(bunCmd, ['run', indexPath, ...process.argv.slice(2)], {
            stdio: 'inherit',
            env: process.env,
            cwd: process.cwd(),
            shell: false
          });
          
          child.on('error', (err) => {
            if (err.code === 'ENOENT') {
              console.error('Could not find bun. Please install it from https://bun.sh');
            } else {
              console.error('Failed to start kuuzuki:', err.message);
            }
            process.exit(1);
          });
          
          child.on('exit', (code, signal) => {
            if (signal) {
              process.exit(1);
            } else {
              process.exit(code || 0);
            }
          });
          
          // Handle signals properly
          if (process.platform !== 'win32') {
            process.on('SIGINT', () => child.kill('SIGINT'));
            process.on('SIGTERM', () => child.kill('SIGTERM'));
          } else {
            process.on('SIGINT', () => child.kill());
            process.on('SIGTERM', () => child.kill());
          }
          EOF
          
          chmod +x dist/npm/kuuzuki/bin/kuuzuki
          
          # Create Windows batch file
          cat > dist/npm/kuuzuki/bin/kuuzuki.cmd << 'EOF'
          @echo off
          node "%~dp0\kuuzuki" %*
          EOF
          
          # Create package.json for main package
          cat > dist/npm/kuuzuki/package.json << EOF
          {
            "name": "kuuzuki",
            "version": "${{ steps.extract_version.outputs.version }}",
            "description": "AI-powered terminal assistant",
            "keywords": ["ai", "terminal", "cli", "assistant", "claude"],
            "homepage": "https://github.com/moikas-code/kuuzuki",
            "repository": {
              "type": "git",
              "url": "git+https://github.com/moikas-code/kuuzuki.git"
            },
            "bugs": {
              "url": "https://github.com/moikas-code/kuuzuki/issues"
            },
            "author": "Kuuzuki Team",
            "license": "MIT",
            "bin": {
              "kuuzuki": "./bin/kuuzuki"
            },
            "engines": {
              "node": ">=18.0.0"
            },
            "files": ["bin", "src"],
            "optionalDependencies": {
              "kuuzuki-linux-x64": "^${{ steps.extract_version.outputs.version }}",
              "kuuzuki-linux-arm64": "^${{ steps.extract_version.outputs.version }}",
              "kuuzuki-darwin-x64": "^${{ steps.extract_version.outputs.version }}",
              "kuuzuki-darwin-arm64": "^${{ steps.extract_version.outputs.version }}",
              "kuuzuki-windows-x64": "^${{ steps.extract_version.outputs.version }}"
            },
            "dependencies": $(cat package.json | jq .dependencies)
          }
          EOF
          
          echo "Main package created successfully!"
      
       # 13. Test packages
       - name: Test built packages        run: |
          cd packages/kuuzuki/dist/npm/kuuzuki
          echo "Testing main package..."
          node bin/kuuzuki --version || echo "Version command needs bun runtime"
          
          echo "Package contents:"
          ls -la bin/
          echo "Source files:"
          ls -la src/ | head -20
      
       # 14. Publish platform packages
       - name: Publish platform packages        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
        run: |
          cd packages/kuuzuki
          
          platforms=(
            "linux-x64"
            "linux-arm64"
            "darwin-x64"
            "darwin-arm64"
            "windows-x64"
          )
          
          for platform in "${platforms[@]}"; do
            echo "Publishing kuuzuki-$platform..."
            cd "dist/npm/kuuzuki-$platform"
            npm publish --access public || echo "Package may already exist"
            cd ../../..
          done
      
       # 15. Wait for platform packages to be available
       - name: Wait for npm propagation
         run: sleep 30
       
       # 16. Publish main package
       - name: Publish main kuuzuki package        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
        run: |
          cd packages/kuuzuki/dist/npm/kuuzuki
          npm publish --access public
      
       # 17. Create GitHub Release
       - name: Create Release        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          body: |
            ## Kuuzuki ${{ steps.extract_version.outputs.version }}
            
            ### Installation
            ```bash
            npm install -g kuuzuki
            ```
            
            ### Platform Support
            - ✅ Linux x64
            - ✅ Linux ARM64
            - ✅ macOS x64 (Intel)
            - ✅ macOS ARM64 (Apple Silicon)
            - ✅ Windows x64
            
            ### What's New
            See generated release notes below for changes.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}