--- a/packages/kuuzuki/src/session/index.ts
+++ b/packages/kuuzuki/src/session/index.ts
@@ -806,7 +806,16 @@ export namespace Session {
     }
     // mark session as updated since a message has been added to it
     await update(input.sessionID, (_draft) => {});
 
-    if (isLocked(input.sessionID)) {
+    // Acquire lock early to prevent race conditions
+    let abortSignal;
+    try {
+      abortSignal = lock(input.sessionID);
+    } catch (error) {
+      // If session is locked, queue the request
+      if (error instanceof BusyError) {
         return new Promise((resolve) => {
           const queue = state().queued.get(input.sessionID) ?? [];
           queue.push({
@@ -818,6 +827,10 @@ export namespace Session {
           });
           state().queued.set(input.sessionID, queue);
         });
+      }
+      // Re-throw other errors
+      throw error;
     }
 
     const model = await Provider.getModel(input.providerID, input.modelID);
@@ -933,7 +946,7 @@ export namespace Session {
       }
     }
 
-    using abortSignal = lock(input.sessionID);
+    // Lock already acquired above - use the existing abortSignal
 
     const lastSummary = msgs.findLast(
       (msg) => msg.info.role === "assistant" && msg.info.summary === true,
